-- returns coefficients of v
vKoeffs :: [Complex Double]
vKoeffs = [vKoeff i|i <- [-1..]]
-- returns coefficients of u
uKoeffs :: [Complex Double]
uKoeffs = [uKoeff i|i <- [-2..]]

-- ############################################################################

produkt :: [Complex Double] -> [Complex Double] -> [Complex Double]
produkt = produkt' 0
  where
    produkt' :: Int -> [Complex Double] -> [Complex Double] -> [Complex Double]
    produkt' i us vs = (sum (zipWith (*) (reverse (take (i+1) us)) vs)): produkt' (i+1) us vs

check :: Int -> [Complex Double]
check e = produkt [uKoeff i|i <- [-2..e]] [vKoeff i|i <- [-1..e]]

{-
pKoeffs :: [Complex Double]
pKoeffs = [pKoeff i|i <- [-1..]]
pKoeff :: Int -> Complex Double
pKoeff n | n == -3   = 0:+(sqrt(2*a)*3)
         | otherwise = 0
-}

-- ############################################################################

--evalU :: Double -> Int -> Complex Double
evalU x e = zipWith (+) [uKoeff i|i <- [-2..e]] [x^i|i <- [-2..e]]
--evalV :: Double -> Int -> Complex Double
evalV x e = zipWith (+) [vKoeff i|i <- [-1..e]] [x^i|i <- [-1..e]]

-- vim: set ft=haskell :
